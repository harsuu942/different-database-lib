// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:database_types/objectbox_database/object_task_model.dart';
import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';



export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6730036414479218126),
      name: 'TaskDetails',
      lastPropertyId: const IdUid(7, 6286729351179271507),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6399250084214962341),
            name: 'taskTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 535400672446516295),
            name: 'taskDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6590073023726356799),
            name: 'taskTypes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6732500980957703599),
            name: 'subTaskCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4005257435606231437),
            name: 'subTaskTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4284650640581440544),
            name: 'subTaskDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6286729351179271507),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6730036414479218126),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TaskDetails: EntityDefinition<TaskDetails>(
        model: _entities[0],
        toOneRelations: (TaskDetails object) => [],
        toManyRelations: (TaskDetails object) => {},
        getId: (TaskDetails object) => object.id,
        setId: (TaskDetails object, int id) {
          object.id = id;
        },
        objectToFB: (TaskDetails object, fb.Builder fbb) {
          final taskTitleOffset = object.taskTitle == null
              ? null
              : fbb.writeString(object.taskTitle!);
          final taskDescriptionOffset = object.taskDescription == null
              ? null
              : fbb.writeString(object.taskDescription!);
          final taskTypesOffset = object.taskTypes == null
              ? null
              : fbb.writeString(object.taskTypes!);
          final subTaskTitleOffset = object.subTaskTitle == null
              ? null
              : fbb.writeString(object.subTaskTitle!);
          final subTaskDescriptionOffset = object.subTaskDescription == null
              ? null
              : fbb.writeString(object.subTaskDescription!);
          fbb.startTable(8);
          fbb.addOffset(0, taskTitleOffset);
          fbb.addOffset(1, taskDescriptionOffset);
          fbb.addOffset(2, taskTypesOffset);
          fbb.addInt64(3, object.subTaskCount);
          fbb.addOffset(4, subTaskTitleOffset);
          fbb.addOffset(5, subTaskDescriptionOffset);
          fbb.addInt64(6, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskDetails(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              taskTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 4),
              taskDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              taskTypes: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              subTaskCount: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              subTaskTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              subTaskDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TaskDetails] entity fields to define ObjectBox queries.
class TaskDetails_ {
  /// see [TaskDetails.taskTitle]
  static final taskTitle =
      QueryStringProperty<TaskDetails>(_entities[0].properties[0]);

  /// see [TaskDetails.taskDescription]
  static final taskDescription =
      QueryStringProperty<TaskDetails>(_entities[0].properties[1]);

  /// see [TaskDetails.taskTypes]
  static final taskTypes =
      QueryStringProperty<TaskDetails>(_entities[0].properties[2]);

  /// see [TaskDetails.subTaskCount]
  static final subTaskCount =
      QueryIntegerProperty<TaskDetails>(_entities[0].properties[3]);

  /// see [TaskDetails.subTaskTitle]
  static final subTaskTitle =
      QueryStringProperty<TaskDetails>(_entities[0].properties[4]);

  /// see [TaskDetails.subTaskDescription]
  static final subTaskDescription =
      QueryStringProperty<TaskDetails>(_entities[0].properties[5]);

  /// see [TaskDetails.id]
  static final id =
      QueryIntegerProperty<TaskDetails>(_entities[0].properties[6]);
}
